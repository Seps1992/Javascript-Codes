//HTML CODE

<!Doctype html>
<html lang="en-US">

<head>
  <title>Scatter Plot</title>

  <script src="https://d3js.org/d3.v5.min.js"></script>
  <script src="./script.babel"></script>
  <link rel="stylesheet" href="./style.css">
</head>
<body>
   <main>
    <div class="container">
        <h1 id="title" style="text-align: center">Doping in Professional Bicycle Racing</h1>
        <div id="chart"></div>
    </div>
    <script src="https://d3js.org/d3.v4.min.js"></script>
    <script src="https://d3js.org/d3-selection-multi.v0.4.min.js"></script>
    </main>  
</body>

</html>

//CSS CODE

.dot{fill:black;} 
.dot:hover {
    fill: brown;
  }
body {
    font-family: 'Lato', sans-serif;
}
main {
    display: flex;
    align-items: center;
    justify-content: center;
}

svg {
    stroke: 1px solid #333;
    box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.32), 0 3px 12px 0 rgba(0, 0, 0, 0.24);
}
svg rect {
    fill: red;
}
svg rect:hover {
    fill: #444;
}

#title {
    font-size: 1.5em;
    font-weight: bold;
}

.tooltip {
  background-color: #e36f1c !important;
  position: absolute;
  opacity: 0;
  color: #191919;
  font-size: 15px;
  padding: 5px;
  pointer-events: none;
  border: 2px solid #8f8779;
  border-radius: 3px;
}


//JAVASCRIPT

document.addEventListener('DOMContentLoaded',function(){
//document.getElementById('getMessage').onclick=function(){
req=new XMLHttpRequest();
req.open("GET",'https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/cyclist-data.json',true);
    req.send();
    req.onload=function(){
    json=JSON.parse(req.responseText);
        
    var dataset = json;
    
    const w = 1000;
    const h = 500;
    const padding = 60;
    
    const xScale = d3.scaleTime()
                     .domain(
                       [
                        d3.min(dataset, (d) => new Date(d.Year,0,0,0,0,0,0)), 
                        d3.max(dataset, (d) => new Date(d.Year,0,0,0,0,0,0))
                       ])
                     .range([padding, w - padding]);
    
    const yScale = d3.scaleTime()
                     .domain(
                     [d3.min(dataset, (d) => new Date(0,0,0,0,d.Time.substring(0,2),d.Time.substring(3,5),0)),                                  
                     d3.max(dataset, (d) => new Date(0,0,0,0,d.Time.substring(0,2),d.Time.substring(3,5),0))])
                     .range([h - padding, padding]);
    
    var timeFormat = d3.timeFormat("%M:%S");
    const xAxis = d3.axisBottom(xScale);
    const yAxis = d3.axisLeft(yScale).tickFormat(timeFormat);
    const svg = d3.select("body")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h);
    const title = d3.select("svg")
                  .append("text")
                  .attr("x",w/2)
                  .attr("y",padding)
                  .attr("class","title")
                  .attr("id","title")
                  .text("Alpe d'Huez");
    const legend = d3.select("svg")
                  .append("rect")
                  .attr("x",w-4*padding)
                  .attr("y",h/2-padding/2)
                  .attr("width",4*padding)
                  .attr("height",padding/3)
                  .attr("class","legend")
                  .attr("id","legend")    
    const legendtext = d3.select("svg")
                  .append("text")
                  .attr("x",w-4*padding)
                  .attr("y",h/2-padding/4)
                  .text("35 fastest ascends of the Alpe d'Huez");                
    let tooltip = d3
      .select("body")
      .append("div")
      .attr("class", "tooltip")
      .attr("id", "tooltip")
      .style("opacity", 0);        
    svg.selectAll("circle")
       .data(dataset)
       .enter()
       .append("circle")
       .attr("cx", (d) => xScale(new Date(d.Year,0,0,0,0,0,0)))
       .attr("cy",(d) => yScale(new Date(0,0,0,0,d.Time.substring(0,2),d.Time.substring(3,5),0)))
       .attr("data-xvalue", (d) => (d.Year))
       .attr("data-yvalue", (d) => new Date(1970,0,1,0,d.Time.substring(0,2),d.Time.substring(3,5),0))    
       .attr("r", (d) => 5)
       .attr("class","dot")              
       .on("mouseover", d => { 
        tooltip.style("opacity", .9);
        tooltip.attr("data-date", d.Year)
        tooltip
       .html(
       d.Place + ": "+ d.Year+" "+d.Name + " " + d.Time + "<br>" + d.Doping
          )
          .style("left", d3.event.pageX + "px")
          .style("top", d3.event.pageY - 29 + "px")
          .attr("data-year", d.Year);
      })
      .on("mouseout", d => {
        tooltip.style("opacity", 0);
      }); 
   svg.append("g")
       .attr("transform", "translate(0," + (h - padding) + ")")
       .attr("id","x-axis")
       .call(xAxis);    
    svg.append("g")
       .attr("transform", "translate(" + padding + ",0)")
       .attr("id","y-axis")
       .call(yAxis);        
     d3.selectAll(".dot").each(function(d,i) {
  console.log("data-yvalue of dot " + i + " is " + d3.select(this).attr("data-yvalue"))
})      
        };
  });
  
